// Code generated by protoc-gen-service. DO NOT EDIT.
// source: diagnosis/services.proto

package main

import (
	"net/http"

	"github.com/ca-risken/datasource-api/proto/diagnosis"
)

func (g *gatewayService) listDiagnosisDataSourceDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.ListDiagnosisDataSourceRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.ListDiagnosisDataSource(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) getDiagnosisDataSourceDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.GetDiagnosisDataSourceRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.GetDiagnosisDataSource(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) putDiagnosisDataSourceDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.PutDiagnosisDataSourceRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.PutDiagnosisDataSource(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) deleteDiagnosisDataSourceDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.DeleteDiagnosisDataSourceRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.DeleteDiagnosisDataSource(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) listWpscanSettingDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.ListWpscanSettingRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.ListWpscanSetting(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) getWpscanSettingDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.GetWpscanSettingRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.GetWpscanSetting(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) putWpscanSettingDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.PutWpscanSettingRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.PutWpscanSetting(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) deleteWpscanSettingDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.DeleteWpscanSettingRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.DeleteWpscanSetting(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) listPortscanSettingDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.ListPortscanSettingRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.ListPortscanSetting(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) getPortscanSettingDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.GetPortscanSettingRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.GetPortscanSetting(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) putPortscanSettingDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.PutPortscanSettingRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.PutPortscanSetting(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) deletePortscanSettingDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.DeletePortscanSettingRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.DeletePortscanSetting(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) listPortscanTargetDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.ListPortscanTargetRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.ListPortscanTarget(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) getPortscanTargetDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.GetPortscanTargetRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.GetPortscanTarget(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) putPortscanTargetDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.PutPortscanTargetRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.PutPortscanTarget(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) deletePortscanTargetDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.DeletePortscanTargetRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.DeletePortscanTarget(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) listApplicationScanDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.ListApplicationScanRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.ListApplicationScan(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) getApplicationScanDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.GetApplicationScanRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.GetApplicationScan(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) putApplicationScanDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.PutApplicationScanRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.PutApplicationScan(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) deleteApplicationScanDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.DeleteApplicationScanRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.DeleteApplicationScan(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) listApplicationScanBasicSettingDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.ListApplicationScanBasicSettingRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.ListApplicationScanBasicSetting(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) getApplicationScanBasicSettingDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.GetApplicationScanBasicSettingRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.GetApplicationScanBasicSetting(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) putApplicationScanBasicSettingDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.PutApplicationScanBasicSettingRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.PutApplicationScanBasicSetting(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) deleteApplicationScanBasicSettingDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.DeleteApplicationScanBasicSettingRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.DeleteApplicationScanBasicSetting(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) invokeScanDiagnosisHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &diagnosis.InvokeScanRequest{}
	if err := bind(req, r); err != nil {
		appLogger.Infof(ctx, "Failed to bind request, err=%+v", err)
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.diagnosisClient.InvokeScan(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}
