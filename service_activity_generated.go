// Code generated by protoc-gen-service. DO NOT EDIT.
// source: activity/service.proto

package main

import (
	"net/http"

	"github.com/ca-risken/aws/proto/activity"
)

func (g *gatewayService) describeARNActivityHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &activity.DescribeARNRequest{}
	if err := bind(req, r); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.activityClient.DescribeARN(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) listCloudTrailActivityHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &activity.ListCloudTrailRequest{}
	if err := bind(req, r); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.activityClient.ListCloudTrail(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}

func (g *gatewayService) listConfigHistoryActivityHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	req := &activity.ListConfigHistoryRequest{}
	if err := bind(req, r); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	if err := req.Validate(); err != nil {
		writeResponse(ctx, w, http.StatusBadRequest, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	resp, err := g.activityClient.ListConfigHistory(ctx, req)
	if err != nil {
		writeResponse(ctx, w, http.StatusInternalServerError, map[string]interface{}{errorJSONKey: err.Error()})
		return
	}
	writeResponse(ctx, w, http.StatusOK, map[string]interface{}{successJSONKey: resp})
}
